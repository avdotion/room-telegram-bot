import telebot
from engine import *


class Wash(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 20
        self.icon = 'üíß'


class Throw(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 25
        self.icon = 'üèÉ'


class PutOut(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 5
        self.icon = 'üóë'


class Buy(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 20
        self.icon = 'üõí'


class Craft(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 5
        self.icon = 'ü•§'


class Carry(Action):
    def __init__(self, timestamp=time.time()):
        super().__init__(timestamp)
        self.rate = 10
        self.icon = 'üõç'


channels = {
    'main': {
        'token': '495959130:AAFVxttJodzYYDe6fqjk-dWsSbqhVstbcpw',
        'supergroup': -1001093228903
    },
    'experimental': {
        'token': '480724884:AAEXMoK5nqwz2rUOWexp35XIG681Y9GQcok',
        'supergroup': -1001272011188
    }
}

current_channel = 'experimental'
bot = telebot.TeleBot(channels[current_channel]['token'])
chat = channels[current_channel]['supergroup']

MENTORS = ['–ë–µ–ª–µ–Ω—å–∫–∞—è', '–ö—É–¥—Ä—è—à–∫–∞', '–ß–µ—Ä–Ω–µ–Ω—å–∫–∞—è']
MONTHS = ['–Ø–Ω–≤–∞—Ä—è',
          '–§–µ–≤—Ä–∞–ª—è',
          '–ú–∞—Ä—Ç–∞',
          '–ê–ø—Ä–µ–ª—è',
          '–ú–∞—è',
          '–ò—é–Ω—è',
          '–ò—é–ª—è',
          '–ê–≤–≥—É—Å—Ç–∞',
          '–°–µ–Ω—Ç—è–±—Ä—è',
          '–û–∫—Ç—è–±—Ä—è',
          '–ù–æ—è–±—Ä—è',
          '–î–µ–∫–∞–±—Ä—è']
WEEKDAYS = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            '–í—Ç–æ—Ä–Ω–∏–∫',
            '–°—Ä–µ–¥–∞',
            '–ß–µ—Ç–≤–µ—Ä–≥',
            '–ü—è—Ç–Ω–∏—Ü–∞',
            '–°—É–±–±–æ—Ç–∞',
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

DISPLAY_LIMIT = 10


room = Storage('test/bot.yaml', 'test/bot.yaml')
room.load()

randomize = {'time': time.time(), 'message': None, 'user': None}


def get_nightmare():
    today = datetime.date.today()
    new_year = datetime.date(datetime.date.today().year, 1, 1)
    shift = room.data.get('nightmare_shift', 0)
    return ((today - new_year).days + shift) % len(MENTORS)


@bot.message_handler(commands=['help'])
def handle_help(message):
    if message.chat.id == channels[current_channel]['supergroup']:
        bot.send_message(message.chat.id,
                         f'*–ë–æ—Ç –∫–æ–º–Ω–∞—Ç–Ω—ã–π*\n_–í–µ—Ä—Å–∏—è —è–¥—Ä–∞: {version}_',
                         parse_mode='Markdown')


@bot.message_handler(commands=['dashboard'])
def handle_dashboard(message):
    if message.chat.id == channels[current_channel]['supergroup']:
        d = room['users']
        m = str()

        today = datetime.date.today()
        weekday = WEEKDAYS[datetime.date.weekday(today)]
        total_score = sum([item.balance for item in d.values()])
        middle_score = total_score / len(d)

        m = f'''{today.day} {MONTHS[today.month - 1]} ({weekday})
*–ù–æ—á–Ω–∞—è –≤–æ—Å–ø–µ—Ç–∫–∞*: _{MENTORS[get_nightmare()]}_
_–°—á—ë—Ç –∫–æ–º–Ω–∞—Ç—ã: {total_score}_\n
'''
        for user in sorted(d.values(), key=lambda x: len(x.actions_list)):
            m += f'*{user.name}*: {badge_count(user.actions_list)}'
            m += '\n'
        m += '\n'
        for user in sorted(d.values(), key=lambda x: x.balance):
            m += f'*{user.name}*: {user.balance}'
            m += '\n'

        m += f'`–ú–∏–¥–ª—Å–∫–æ—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–µ: {middle_score}`'
        bot.send_message(message.chat.id,
                         m,
                         parse_mode='Markdown')


@bot.message_handler(commands=['wash'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(Wash(message.date))
        room.save()


@bot.message_handler(commands=['throw'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(Throw(message.date))
        room.save()


@bot.message_handler(commands=['put_out'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(PutOut(message.date))
        room.save()


@bot.message_handler(commands=['buy'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(Buy(message.date))
        room.save()


@bot.message_handler(commands=['craft'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(Craft(message.date))
        room.save()


@bot.message_handler(commands=['carry'])
def handle_action(message):
    if message.from_user.id in room['users'].keys():
        room['users'][message.from_user.id].add_action(Carry(message.date))
        room.save()


@bot.message_handler(commands=['challenge'])
def handle_board(message):
    if message.from_user.id in room['users'].keys():
        if room['board'].title is not None:
            m = f'*{room["board"].title}:*'
        else:
            m = '*–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:*'
        bot.send_message(message.chat.id,
                         m,
                         parse_mode='Markdown')
        if len(room['board']):
            for goal in room['board'].values():
                timestamp = datetime.datetime.fromtimestamp(goal.timestamp).strftime("%H:%M:%S %d.%m.%Y")
                m = f'*{goal.title}*\n_–ù–∞–≥—Ä–∞–¥–∞: {goal.rate}_\n–°–æ–∑–¥–∞–Ω–æ: {timestamp}'
                bot.send_message(message.chat.id,
                                 m,
                                 parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id,
                             '_–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—É—Å—Ç!_',
                             parse_mode='Markdown')
        keyboard = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton(
            text=f'–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂',
            callback_data=f'AC')
        keyboard.add(button)
        bot.send_message(message.chat.id,
                         "*–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—ä—è–≤–∏—Ç—å —Å–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂:*",
                         reply_markup=keyboard,
                         parse_mode='Markdown')


@bot.message_handler(commands=['admin'])
def handle_kick_ass(message):
    if message.chat.id == channels[current_channel]['supergroup']:
        if room['users'][message.from_user.id].is_admin:
            keyboard = telebot.types.InlineKeyboardMarkup()
            i = 0
            actions = list()

            for user in room['users'].values():
                for item in user.actions_list.values():
                    actions.append((item, user.id))
                    actions.sort(key=lambda x: x[0].timestamp)

            while i < DISPLAY_LIMIT and i < len(actions):
                item = actions[-i - 1]
                timestamp = datetime.datetime.fromtimestamp(item[0].timestamp).strftime("%H:%M:%S %d.%m.%Y")
                button = telebot.types.InlineKeyboardButton(
                    text=f'{item[0].icon} ‚Äî {room["users"][item[1]].name} ({timestamp})',
                    callback_data=f'M{item[0].id}.{item[1]}')
                keyboard.add(button)
                i += 1
            mentor_switch = telebot.types.InlineKeyboardButton(
                text='–°–º–µ–Ω–∏—Ç—å –Ω–æ—á–Ω—É—é –≤–æ—Å–ø–µ—Ç–∫—É',
                callback_data='NM')
            custom_action = telebot.types.InlineKeyboardButton(
                text='–ü—Ä–∏—Å–≤–æ–∏—Ç—å —ç–∫—à–Ω',
                callback_data='CA'
            )
            hide = telebot.types.InlineKeyboardButton(
                text='–°–ø—Ä—è—Ç–∞—Ç—å –º–µ–Ω—é',
                callback_data='HM'
            )
            keyboard.add(mentor_switch)
            keyboard.add(custom_action)
            keyboard.add(hide)

            bot.send_message(message.chat.id,
                             "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –±–∞—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                             reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: len(call.data) and call.data[0] == 'M')
def callback_inline(call):
    action_id, user_id = map(int, call.data[1:].split('.'))
    if room['users'][call.from_user.id].is_admin:
        fine = room['users'][call.from_user.id].actions_list[action_id].rate * (1 + FINE_TAX / 100)
        room['users'][user_id].del_action(action_id)
        room.save()
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f'*–≠–∫—à–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω!*\n–®—Ç—Ä–∞—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {room["users"][user_id].name} —Å–æ—Å—Ç–∞–≤–∏–ª {fine}.',
                              parse_mode='Markdown')
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


@bot.callback_query_handler(func=lambda call: len(call.data) >= 2 and call.data[:2] == 'NM')
def callback_inline(call):
    if room['users'][call.from_user.id].is_admin:
        if len(call.data) == 2:
            keyboard = telebot.types.InlineKeyboardMarkup()
            for i, item in enumerate(MENTORS):
                button = telebot.types.InlineKeyboardButton(
                    text=f'{item}',
                    callback_data=f'NM{i}')
                keyboard.add(button)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ö–∞–∫–∞—è –≤–æ—Å–ø–µ—Ç–∫–∞ –ø—Ä–∏—à–ª–∞ —Å–µ–≥–æ–¥–Ω—è?',
                                  reply_markup=keyboard)
        else:
            index = int(call.data[2:])
            room['nightmare_shift'] = (index - len(MENTORS) + 1) % len(MENTORS)
            room.save()
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ù–æ–≤–∞—è –≤–æ—Å–ø–µ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


@bot.callback_query_handler(func=lambda call: len(call.data) >= 2 and call.data[:2] == 'CA')
def callback_inline(call):
    if room['users'][call.from_user.id].is_admin:
        if len(call.data) == 2:
            keyboard = telebot.types.InlineKeyboardMarkup()
            for item in room['users'].values():
                button = telebot.types.InlineKeyboardButton(text=f'{item.name}', callback_data=f'CA.{item.id}')
                keyboard.add(button)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∂–∏ –∏ —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                                  reply_markup=keyboard)
        else:
            if event_listener is not None and room['users'][event_listener.from_user.id].is_admin:
                date = event_listener.date
                m = event_listener.text
                if len(m) and len(m.split()) == 2:
                    m = m.split()
                    emoji = m[0]
                    try:
                        rate = int(m[1])
                    except ValueError:
                        bot.edit_message_text(chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
                    else:
                        user = int(call.data.split('.')[1])
                        room['users'][user].add_action(CustomAction(rate, emoji, date))
                        room.save()
                        bot.edit_message_text(chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              text="–≠–∫—à–Ω –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


event_listener = None


@bot.message_handler(content_types=["text"])
def handle_event_listener(message):
    global event_listener
    event_listener = message


if __name__ == '__main__':
    t1 = threading.Thread(target=bot.polling, args=(True, ))
    # t2 = threading.Thread(target=display_table)

    t1.start()
    # t2.start()

    t1.join()
    # t2.join()
